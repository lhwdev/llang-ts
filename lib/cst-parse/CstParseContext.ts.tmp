import type { Token } from "../token/Token.ts";
import type { CstCodeContext } from "./CstCodeContext.ts";
import type { CstNode } from "../cst/CstNode.ts";
import type { CstNodeInfo } from "../cst/CstNodeInfo.ts";
import type { CstTree } from "../cst/CstTree.ts";
import type { CstCodeScope, CstCodeScopes } from "./tokenizer/CstCodeScope.ts";
import type { CstParseIntrinsics } from "./CstParseIntrinsics.ts";
import type { CstIntermediateGroup } from "./intermediate/CstIntermediateGroup.ts";
import type { CstContextLocal, CstContextLocalKey } from "./intermediate/CstContextLocal.ts";

let baseContext: CstParseContext | null = null;

export function getContext(): CstParseContext {
  return baseContext!;
}

export function withContext<R>(context: CstParseContext<any>, fn: () => R): R {
  const previous = baseContext;
  if (previous === context) return fn();

  baseContext = context;
  try {
    return fn();
  } finally {
    baseContext = previous;
  }
}

export type CstNodeHintType = "discardable" | "nullable" | NodeHint<any>;

export interface CstParseContext<out Node extends CstNode = CstNode> {
  /// Code parsing
  code<R extends Token>(fn: (code: CstCodeContext) => R): R;
  code<R>(scope: CstCodeScope, fn: (code: CstCodeContext) => R): R;

  readonly codeScopes: CstCodeScopes;

  /// Node management
  beginChild<Child extends CstNode>(info: CstNodeInfo<Child>): CstParseContext<Child>;
  skipCurrent(): Node | null;

  readonly intrinsics: CstParseIntrinsics;
  hintType(type: CstNodeHintType): void;

  memoize<T>(calculate: () => T, dependencies?: unknown[]): T;

  provideContext(value: CstContextLocal<any>): void;
  resolveContext<T>(key: CstContextLocalKey<T>): CstContextLocal<T>;

  beforeEnd(node: Node): CstTree<Node>;

  end(node: Node): Node;

  endWithError(error: unknown | null): Node | null;

  insertChild<Child extends CstNode>(node: Child): Child;

  /// Group
  currentGroup: CstIntermediateGroup<Node>;

  withCurrentGroup<R, Group extends CstIntermediateGroup<any>>(
    group: Group,
  ): (fn: (group: Group) => R) => R;
}

// CstIntermediateGroup.prototype.withSelf = function (fn) {
//   return getContext().withCurrentGroup(this, fn);
// };

export abstract class NodeHint<Value> {
  declare private $: void;

  constructor(readonly value: Value) {}
}

export namespace NodeHints {
  export class DebugName extends NodeHint<string> {
    declare private debugName: void;
  }

  export class DebugNodeName extends NodeHint<string> {
    declare private debugNodeName: void;
  }

  export class DebugImportance extends NodeHint<"hide"> {
    declare private debugNodeName: void;
  }
}
